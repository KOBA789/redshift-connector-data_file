require 'redshift_connector/reader/abstract'
require 'redshift_connector/reader/exception'
require 'strscan'

module RedshiftConnector
  # Reads CSV file generated by Redshift UNLOAD statement (with option ADDQUOTES ESCAPE).
  # UNLOAD escapes data by '\' (backslash character), we cannot use standard CSV class.
  class Reader::RedshiftCSV < Reader::Abstract
    declare_reader :redshift_csv

    def self.data_object?(key)
      /\.csv(?:\.|\z)/ =~ File.basename(key)
    end

    # f :: IO
    def initialize(f)
      @f = f
    end

    def each
      # We can use simple #each_line to read single row
      # because line terminators are always escaped by UNLOAD.
      @f.each_line do |line|
        yield parse_row(line, @f.lineno)
      end
    end

    def parse_row(line, lineno = nil)
      row = []
      s = StringScanner.new(line)
      s.skip(/\s+/)
      until s.eos?
        col = s.scan(/"(?:\\.|[^"\\]+)*"/) or raise MalformedCSVException, "CSV parse error at line #{lineno}"
        row.push unescape_column(col)
        s.skip(/\s*/)    # skip line terminator on line ends
        s.skip(/,\s*/)
      end
      row
    end

    UNESCAPE_MAP = {
      '\\"' => '"',
      "\\'" => "'",
      '\\,' => ',',
      '\\r' => "\r",
      '\\n' => "\n",
      '\\\\' => '\\'
    }

    def unescape_column(col)
      charmap = UNESCAPE_MAP
      col[1...-1].gsub(/\\./) {|s| charmap[s] }
    end
  end
end
